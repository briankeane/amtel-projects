
LED_BLINKER_WITH_SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a61  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000362  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	aa 30       	cpi	r26, 0x0A	; 10
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  d4:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <SysInit>:
 * Set up general environment
 */
void SysInit(void)
{
	// Set up i/o ports
	DDRB |= (1<<DDB5);			// B5 Output (LED)
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB7);			// B7 Input  (PushButton)
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	84 b9       	out	0x04, r24	; 4
  e8:	08 95       	ret

000000ea <CheckSWs>:
/**
 * Check status of switches and take action on press and release
 */
void CheckSWs(void)
{
	if (SW1Pressed_F && !SW1ActionTaken_F)
  ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SW1Pressed_F>
  ee:	88 23       	and	r24, r24
  f0:	59 f0       	breq	.+22     	; 0x108 <CheckSWs+0x1e>
  f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <SW1ActionTaken_F>
  f6:	91 11       	cpse	r25, r1
  f8:	07 c0       	rjmp	.+14     	; 0x108 <CheckSWs+0x1e>
	{
		LED_OFF();
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	85 b9       	out	0x05, r24	; 5
		SW1ActionTaken_F = TRUE;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <SW1ActionTaken_F>
 106:	08 95       	ret
	}
	else if ( !SW1Pressed_F && SW1ActionTaken_F)
 108:	81 11       	cpse	r24, r1
 10a:	09 c0       	rjmp	.+18     	; 0x11e <CheckSWs+0x34>
 10c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SW1ActionTaken_F>
 110:	88 23       	and	r24, r24
 112:	29 f0       	breq	.+10     	; 0x11e <CheckSWs+0x34>
	{
		
		LED_ON();
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 62       	ori	r24, 0x20	; 32
 118:	85 b9       	out	0x05, r24	; 5
		SW1ActionTaken_F = FALSE;
 11a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <SW1ActionTaken_F>
 11e:	08 95       	ret

00000120 <TC1_Init>:
{
	// Set up the interrupt to "prescale" up to as close to 1ms as possible (1/64th)
	// We handle the count from there.
	// 
	// Set CTC Mode
	TCCR1B |= (1<<WGM12);
 120:	e1 e8       	ldi	r30, 0x81	; 129
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
	
	// Via Datasheet, p.155 table 19-7, register TCCR1B determines the scale
	// For 1/64th, set CS10=1, CS11=1, CS12=0
	TCCR1B |= (1<<CS10) | (1<<CS11);
 12a:	80 81       	ld	r24, Z
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);    // (extraneous b/c it is already initialized with a 0)
 130:	80 81       	ld	r24, Z
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	80 83       	st	Z, r24
	
	// Enable Output Compare.
	// TODO: Ask about this
	TIMSK1 |= (1<<OCIE1A);
 136:	ef e6       	ldi	r30, 0x6F	; 111
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
	
	// TODO: Ask about this too
	// Set OCR1A to F_CPU/freq*2*n-1
	OCR1A = 124;    // (uint8_t)(F_CPU/(1000*2*64) - 1)
 140:	8c e7       	ldi	r24, 0x7C	; 124
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 148:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 14c:	08 95       	ret

0000014e <main>:
#include "main.h"


int main(void)
{
	SysInit();
 14e:	0e 94 6e 00 	call	0xdc	; 0xdc <SysInit>
	
	TC1_Init();
 152:	0e 94 90 00 	call	0x120	; 0x120 <TC1_Init>
	
	sei();   // enable interrupts
 156:	78 94       	sei
	
    while (1) 
    {
		CheckSWs();
 158:	0e 94 75 00 	call	0xea	; 0xea <CheckSWs>
 15c:	fd cf       	rjmp	.-6      	; 0x158 <main+0xa>

0000015e <__vector_11>:
* Timer 1
* 
* fires every millisec
*/
ISR(TIMER1_COMPA_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
	// IF above zero, then decrement
	if (msecTimer)
 16e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <msecTimer>
 172:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <msecTimer+0x1>
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	29 f0       	breq	.+10     	; 0x184 <__vector_11+0x26>
		msecTimer--;
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <msecTimer+0x1>
 180:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <msecTimer>
		
	if ((TestTimer) && (TestTimer < TIMER_DISABLE))
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	8e 3f       	cpi	r24, 0xFE	; 254
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	92 07       	cpc	r25, r18
 194:	20 f4       	brcc	.+8      	; 0x19e <__vector_11+0x40>
		TestTimer--;
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
	if (SecsCounter == 1000)
 19e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SecsCounter>
 1a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SecsCounter+0x1>
 1a6:	88 3e       	cpi	r24, 0xE8	; 232
 1a8:	93 40       	sbci	r25, 0x03	; 3
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <__vector_11+0x56>
	{
		
		SecsCounter = 0;
 1ac:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <SecsCounter+0x1>
 1b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <SecsCounter>
		// Handle 1 sec events here
		
		// LED_TOGGLE();
	}
	
	if (SW1 != SW_PRESSED)
 1b4:	1f 9b       	sbis	0x03, 7	; 3
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <__vector_11+0x68>
	{
		SW1dbTimer = 0;
 1b8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SW1dbTimer+0x1>
 1bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SW1dbTimer>
		SW1Pressed_F = FALSE;
 1c0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <SW1Pressed_F>
 1c4:	0c c0       	rjmp	.+24     	; 0x1de <__vector_11+0x80>
	}
	else
	{
		if (SW1dbTimer < 255)
 1c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SW1dbTimer>
 1ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SW1dbTimer+0x1>
 1ce:	8f 3f       	cpi	r24, 0xFF	; 255
 1d0:	91 05       	cpc	r25, r1
 1d2:	28 f4       	brcc	.+10     	; 0x1de <__vector_11+0x80>
			++SW1dbTimer;
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SW1dbTimer+0x1>
 1da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SW1dbTimer>
	}
	if (SW1dbTimer > DB_TIME)
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SW1dbTimer>
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SW1dbTimer+0x1>
 1e6:	c3 97       	sbiw	r24, 0x33	; 51
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <__vector_11+0x92>
		SW1Pressed_F = TRUE;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SW1Pressed_F>
}
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
